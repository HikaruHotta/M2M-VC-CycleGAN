# -*- coding: utf-8 -*-
"""preprocess_training.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1GkeI0tVI81cO2O5vRa8za7Tgr_cIv18J
"""

import os
import numpy as np
import librosa
from librosa.filters import mel as librosa_mel_fn

import torch
import torch.nn as nn
import torch.nn.functional as F

import glob
from tqdm import tqdm
import random
from torch.utils.data.dataset import Dataset
import pickle

n_fft = 1024
hop_length = 256
win_length = 1024
sampling_rate = 22050
n_mel_channels = 80
mel_fmin = 0.0
mel_fmax = None

# Code from: https://github.com/descriptinc/melgan-neurips


class Audio2Mel(nn.Module):
    def __init__(
        self,
        n_fft=1024,
        hop_length=256,
        win_length=1024,
        sampling_rate=22050,
        n_mel_channels=80,
        mel_fmin=0.0,
        mel_fmax=None,
    ):
        super().__init__()
        ##############################################
        # FFT Parameters                              #
        ##############################################
        window = torch.hann_window(win_length).float()
        mel_basis = librosa_mel_fn(
            sampling_rate, n_fft, n_mel_channels, mel_fmin, mel_fmax
        )
        mel_basis = torch.from_numpy(mel_basis).float()
        self.register_buffer("mel_basis", mel_basis)
        self.register_buffer("window", window)
        self.n_fft = n_fft
        self.hop_length = hop_length
        self.win_length = win_length
        self.sampling_rate = sampling_rate
        self.n_mel_channels = n_mel_channels

    def forward(self, audio):
        p = (self.n_fft - self.hop_length) // 2
        audio = F.pad(audio, (p, p), "reflect").squeeze(1)
        fft = torch.stft(
            audio,
            n_fft=self.n_fft,
            hop_length=self.hop_length,
            win_length=self.win_length,
            window=self.window,
            center=False,
        )
        real_part, imag_part = fft.unbind(-1)
        magnitude = torch.sqrt(real_part ** 2 + imag_part ** 2)
        mel_output = torch.matmul(self.mel_basis, magnitude)
        log_mel_spec = torch.log10(torch.clamp(mel_output, min=1e-5))
        return log_mel_spec


def normels(wavspath):
    wav_files = glob.glob(os.path.join(
        wavspath, '**', '*.wav'), recursive=True)  # source_path
#   vocoder = Audio2Mel(n_fft=1024,
#                     hop_length=256,
#                     win_length=1024,
#                     sampling_rate=22050,
#                     n_mel_channels=80,
#                     mel_fmin=0.0,
#                     mel_fmax=None)
    vocoder = torch.hub.load('descriptinc/melgan-neurips', 'load_melgan')

    mel_list = list()
    for wavpath in tqdm(wav_files, desc='Preprocess wav to mel'):
        wav_orig, _ = librosa.load(wavpath, sr=sampling_rate, mono=True)
        spec = vocoder(torch.tensor([wav_orig]))
        mel_list.append(spec.cpu().detach().numpy()[0])

    # Note: np.ma.log() calculating log on masked array (for incomplete or invalid entries in array)
    mel_concatenated = np.ma.log(np.concatenate(mel_list, axis=1))
    mel_mean = np.mean(mel_concatenated, axis=1, keepdims=True)
    mel_std = np.std(mel_concatenated, axis=1, keepdims=True)
    #print(mel_concatenated.shape, mel_mean.shape, mel_std.shape)

    mel_normalized = list()
    for mel in mel_list:
        assert mel.shape[-1] >= 64, f"Mel spectogram length must be greater than 64 frames, but was {mel.shape[-1]}"
        # print("Mel shape = ", mel.shape)
        app = (np.ma.log(mel) - mel_mean) / mel_std
        mel_normalized.append(app)
        # print("Normalized mel, mel_std, mel_mean shapes = ",
        #       app.shape, mel_std.shape, mel_mean.shape)

    return mel_normalized, mel_mean, mel_std


def save_pickle(variable, fileName):
    with open(fileName, 'wb') as f:
        pickle.dump(variable, f)


def load_pickle_file(fileName):
    with open(fileName, 'rb') as f:
        return pickle.load(f)

def buildTrainset(source_path, target_path, cache_folder='./cache/'):

    print('Building training dataset...')

    mel_normalized_A, mel_mean_A, mel_std_A = normels(source_path)
    mel_normalized_B, mel_mean_B, mel_std_B = normels(target_path)

    if not os.path.exists(cache_folder):
        os.makedirs(cache_folder)

    np.savez(os.path.join(cache_folder, 'norm_stat_voc.npz'),
            mean=mel_mean_A,
            std=mel_std_A)
    
    np.savez(os.path.join(cache_folder, 'norm_stat_coraal.npz'),
            mean=mel_mean_B,
            std=mel_std_B)

    save_pickle(variable=mel_normalized_A,
                fileName=os.path.join(cache_folder, "voc_normalized.pickle"))

    save_pickle(variable=mel_normalized_B,
                fileName=os.path.join(cache_folder, "coraal_normalized.pickle"))

    print('training dataset constructed and saved!')


if __name__ == '__main__':
    source_path = '/home/sofianzalouk/sofian_dataset/voc'
    target_path = '/home/sofianzalouk/sofian_dataset/coraal'
    cache_folder = '/home/data/vc3_melspec_dataset'

    buildTrainset(source_path=source_path,
                  target_path=target_path, cache_folder=cache_folder)
